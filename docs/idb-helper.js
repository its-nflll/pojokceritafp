const DB_NAME="pojokcerita-db",DB_VERSION=1,STORE_NAME="stories";function openDB(){return new Promise(((e,t)=>{const r=indexedDB.open(DB_NAME,1);r.onerror=()=>t(r.error),r.onsuccess=()=>e(r.result),r.onupgradeneeded=e=>{const t=e.target.result;if(!t.objectStoreNames.contains("stories")){const e=t.createObjectStore("stories",{keyPath:"id",autoIncrement:!0});e.createIndex("createdAt","createdAt",{unique:!1}),e.createIndex("name","name",{unique:!1})}t.objectStoreNames.contains("image-cache")||t.createObjectStore("image-cache",{keyPath:"url"})}}))}async function deleteStory(e){const t=await openDB();return new Promise(((r,o)=>{const n=t.transaction("stories","readwrite"),s=n.objectStore("stories");s.get(e).onsuccess=e=>{const r=e.target.result;if(r&&r.photoUrl)try{t.transaction("image-cache","readwrite").objectStore("image-cache").delete(r.photoUrl)}catch(e){console.error("Error deleting associated image:",e)}},s.delete(e),n.oncomplete=()=>r(),n.onerror=()=>o(n.error)}))}async function getAllStories(){const e=await openDB();return new Promise(((t,r)=>{const o=e.transaction("stories","readonly").objectStore("stories").getAll();o.onsuccess=()=>{t(o.result)},o.onerror=()=>r(o.error)}))}self.openDB=openDB,self.deleteStory=deleteStory,self.getAllStories=getAllStories;
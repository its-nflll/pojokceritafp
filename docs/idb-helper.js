const DB_NAME="pojokcerita-db",DB_VERSION=1,STORE_NAME="stories";function openDB(){return new Promise(((e,r)=>{const t=indexedDB.open(DB_NAME,1);t.onerror=()=>r(t.error),t.onsuccess=()=>e(t.result),t.onupgradeneeded=e=>{const r=e.target.result;if(!r.objectStoreNames.contains("stories")){const e=r.createObjectStore("stories",{keyPath:"id",autoIncrement:!0});e.createIndex("createdAt","createdAt",{unique:!1}),e.createIndex("name","name",{unique:!1})}r.objectStoreNames.contains("image-cache")||r.createObjectStore("image-cache",{keyPath:"url"})}}))}async function deleteStory(e){const r=await openDB();return new Promise(((t,o)=>{try{if(!e)return void o(new Error("Story ID is required"));const n=r.transaction("stories","readwrite");n.onerror=e=>{console.error("Transaction error:",e),o(new Error("Transaction failed"))};const s=n.objectStore("stories"),c=s.get(e);c.onsuccess=n=>{const c=n.target.result;if(!c)return console.warn(`Story with ID ${e} not found, skipping delete operation`),void t();if(c.photoUrl)try{r.transaction("image-cache","readwrite").objectStore("image-cache").delete(c.photoUrl)}catch(e){console.error("Error deleting associated image:",e)}const i=s.delete(e);i.onsuccess=()=>{console.log(`Successfully deleted story with ID: ${e}`),t()},i.onerror=r=>{console.error(`Error deleting story with ID ${e}:`,r.target.error),o(r.target.error)}},c.onerror=r=>{console.error(`Error retrieving story with ID ${e}:`,r.target.error),o(r.target.error)}}catch(e){console.error("Unexpected error in deleteStory:",e),o(e)}}))}async function getAllStories(){const e=await openDB();return new Promise(((r,t)=>{const o=e.transaction("stories","readonly").objectStore("stories").getAll();o.onsuccess=()=>{r(o.result)},o.onerror=()=>t(o.error)}))}self.openDB=openDB,self.deleteStory=deleteStory,self.getAllStories=getAllStories;